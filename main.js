!function(){"use strict";var e={855:function(e,t,n){e.exports=n.p+"images/spinner_svg.dc4086388e55820fbae1.svg"}},t={};function n(i){var s=t[i];if(void 0!==s)return s.exports;var o=t[i]={exports:{}};return e[i](o,o.exports,n),o.exports}n.p="",function(){class e{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._errorClass=e.errorClass,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._submitButtonSelector=e.submitButtonSelector,this._form=t}_setFormListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonElement=this._form.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_getElementTxt(e){return"url"===e.type?"".concat(e.type,"-input"):e.id}_showInputError(e){const t=this._form.querySelector(".".concat(this._getElementTxt(e),"-error"));e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_removeInputError(e){const t=this._form.querySelector(".".concat(this._getElementTxt(e),"-error"));e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._removeInputError(e):this._showInputError(e)}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._removeInputError(e)})),this._form.reset(),this._toggleButtonState()}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}enableValidation(){this._setFormListeners(),this._form.addEventListener("submit",(e=>e.preventDefault()))}}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i(),t="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghiklmnopqrstuvwxyz".split("");e||(e=Math.floor(Math.random()*t.length));let n="";for(let i=0;i<e;i++)n+=t[Math.floor(Math.random()*t.length)];return n}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:100,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:150;return Math.floor(Math.random()*(t-e+1))+e}function s(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";e.textContent=t}function o(e,t){setTimeout(e,t)}class r{constructor(e,n,i,s,o,r){const{name:l,link:a,_id:c}=e,{likes:u,isOwner:_,likedByCurrUser:h}=o;this._name=l,this._link=a,this._handleImageClick=n,this._openRemoveItemPopup=i,this._cardSelector=r,this._likes=u||[],this._isOwner=_||!1,this._isLikedByCurrUser=h||!1,this._id=c||t(),this._handleLikedToggle=s}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".places__item").cloneNode(!0)}_handleToggleLikedBtn(e){e.stopPropagation(),this._handleLikedToggle(this._isLikedByCurrUser,this,this._id)}onUpdateLikesAmount(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];this._likes=e,console.log("this._likes:",this._likes),this._isLikedByCurrUser?this._placeLikeBtn.classList.remove("places__like-btn__active"):this._placeLikeBtn.classList.add("places__like-btn__active"),this._isLikedByCurrUser=!this._isLikedByCurrUser,this._placeLikeAmount.textContent=this._likes.length}_handleRemoveItem(e){e.stopPropagation(),this._openRemoveItemPopup(this._id,this._cardItem)}_setEventListeners(){this._cardItem.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)})),this._placeLikeBtn.addEventListener("click",(e=>{this._handleToggleLikedBtn(e)})),this._cardItem.querySelector(".places__remove-btn").addEventListener("click",(e=>{this._handleRemoveItem(e)}))}generateCard(){return this._cardItem=this._getTemplate(),this._placeImg=this._cardItem.querySelector(".places__img"),this._placeLikeBtn=this._cardItem.querySelector(".places__like-btn"),this._placeLikeAmount=this._cardItem.querySelector(".places__like-counter"),this._placeRemoveBtn=this._cardItem.querySelector(".places__remove-btn"),"Loading..."!==this._name&&"images/spinner_svg.dc4086388e55820fbae1.svg"!==this._link&&this._setEventListeners(),this._isOwner||this._placeRemoveBtn.remove(),this._isLikedByCurrUser&&this._placeLikeBtn.classList.add("places__like-btn__active"),this._placeImg.style.backgroundImage="url(".concat(this._link,")"),this._placeImg.alt="a photo of ".concat(this._name),this._cardItem.querySelector(".places__name").textContent="".concat(this._name),this._placeLikeAmount.textContent=this._likes.length,this._cardItem}}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class a{constructor(e){l(this,"_handleEscClose",(e=>{"Escape"==e.key&&this.close()})),l(this,"_handleContextMenu",(e=>{e.preventDefault()})),this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("popup-box_visible"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup-box_visible"),document.removeEventListener("keydown",this._handleEscClose)}handleLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...",n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];e.disabled=!n,this._elementTextModifying(e,t)}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup-box_visible")||e.target.classList.contains("popup-box__close-button"))&&this.close()}))}}class c extends a{constructor(e,t,n){var i,o;super(e),o=e=>{e.preventDefault(),this._handleSubmitFrom(this._returnInputValObj(),this._formBtn,this._btnText)},(i="_handleFormSubmit")in this?Object.defineProperty(this,i,{value:o,enumerable:!0,configurable:!0,writable:!0}):this[i]=o,this._handleSubmitFrom=t,this._formElement=this._popupElement.querySelector(".popup-box__form"),this._formBtn=this._formElement.querySelector(".popup-box__submit-button"),this._btnText=n,this._inputList=[...this._formElement.querySelectorAll(".popup-box__input")],this._elementTextModifying=s}_returnInputValObj(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}open(){super.open()}close(){super.close(),this._formElement.reset()}setEventListeners(){this._formElement.addEventListener("submit",this._handleFormSubmit),super.setEventListeners()}}var u=n(855);const _={},h=document.querySelector(".profile__edit-btn"),d=document.querySelector(".profile__add-btn"),m=document.querySelector(".profile__avatar-cover"),p="Something went wrong, please try again later ",f=document.querySelector('input[name="name_input"]'),g=document.querySelector('input[name="about_me"]');function v(){_["form_change-profile-pic"].resetValidation(),T.open()}function b(){_["form_add-place"].resetValidation(),B.open()}function E(){_["form_profile-edit"].resetValidation(),x.open(),function(e){let{nameInfo:t,aboutMeInfo:n}=e;f.value=t,g.value=n}(P.getUserInfo())}function L(e,t){q.open(e,t)}function k(e,t){w.open(e,t)}function y(e,t,n){e?U.removeItemLike(n).then((e=>{t.onUpdateLikesAmount(e.likes)})).catch((e=>console.log("Error: ".concat(e)))):U.addItemLike(n).then((e=>{t.onUpdateLikesAmount(e.likes)})).catch((e=>console.log("Error: ".concat(e))))}function S(e,n,i){e?(P.setUserInfo({name:"Loading...",about:"Loading...",_id:t()}),P.setPictureProfile(u),C.setNewItemlist([{name:"Loading...",link:u,owner:{_id:t()},likes:[]}])):(document.querySelector(".places__grid-container").innerHTML="",P.setUserInfo({name:i.name,about:i.about,_id:i._id}),P.setPictureProfile(i.avatar),C.setNewItemlist(n),h.addEventListener("click",E),d.addEventListener("click",b),m.addEventListener("click",v))}function I(e,t){C.addItem(function(e,t){return new r(e,L,k,y,t,"#places-item-template").generateCard()}(e,t))}const C=new class{constructor(e){let{renderer:t,containerSelector:n}=e;this._renderer=t,this._container=document.querySelector(n)}renderItems(){this._items.forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}setNewItemlist(e){this._items=e,this.renderItems()}}({renderer:e=>{const{owner:t,likes:n}=e,i=P.getUserId();I(e,{isOwner:t._id===i,likedByCurrUser:n.find((e=>e._id===i)),likes:n})},containerSelector:".places__grid-container"}),x=new c(".popup-box_type_profile-edit",(function(e,t,n){let{name_input:i,about_me:s}=e;_["form_add-place"].resetValidation(),x.handleLoading(t),U.setUserInfo({name:i,about:s},t,n).then((e=>{x.handleLoading(t,"Profile edited successfully!"),P.setUserInfo(e),o((()=>{x.close()}),1e3)})).catch((e=>{x.handleLoading(t,p),console.log("Error: ".concat(e))})).finally((()=>{o((()=>{x.handleLoading(t,n)}),1800)}))}),"Save"),B=new c(".popup-box_type_add-item",(function(e,t,n){let{title_place:i,img_link:s}=e;B.handleLoading(t),U.addNewCard({name:i,link:s}).then((e=>{B.handleLoading(t,"Place added successfully!"),I(e,{isOwner:!0,likedByOwner:!1,likes:[]}),o((()=>{B.close()}),1e3)})).catch((e=>{B.handleLoading(t,p),console.log("Error: ".concat(e))})).finally((()=>{o((()=>{B.handleLoading(t,n,!0)}),1800)}))}),"Create"),q=new class extends a{constructor(e){let{popupSelector:t,imgSelector:n,imgTitleSelector:i}=e;super(t),this._imgElement=this._popupElement.querySelector(n),this._titleElement=this._popupElement.querySelector(i)}_setPopupImg(){this._titleElement.textContent=this.title,this._imgElement.src=this._link,this._imgElement.alt="a pictrue of ".concat(this.title)}open(e,t){this.title=e,this._link=t,this._setPopupImg(),super.open()}}({popupSelector:".popup-box_type_img",imgSelector:".popup-box__img",imgTitleSelector:".popup-box__img-title"}),w=new class extends a{constructor(e){let{popupSelector:t,handleSubmitRemoveConfirm:n,initialBtnTxt:i}=e;var o,r;super(t),r=e=>{e.preventDefault(),this._handleSubmitRemoveConfirm(this._id,this._element,this._submitBtnElement,this._initialBtnTxt)},(o="_handleConfirmSubmit")in this?Object.defineProperty(this,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[o]=r,this._handleSubmitRemoveConfirm=n,this._submitBtnElement=this._popupElement.querySelector(".popup-box__submit-button"),this._initialBtnTxt=i,this._elementTextModifying=s}open(e,t){super.open(),this._element=t,this._id=e}close(){super.close()}setEventListeners(){this._submitBtnElement.addEventListener("click",this._handleConfirmSubmit),super.setEventListeners()}}({popupSelector:".popup-box_type_confirm",handleSubmitRemoveConfirm:function(e,t,n,i){w.handleLoading(n),U.onRemoveItem(e).then((()=>{w.handleLoading(n,"Place removed successfully!"),t.remove(),o((()=>{w.close()}),1e3)})).catch((e=>{w.handleLoading(n,p),console.log("Error: ".concat(e))})).finally((()=>{o((()=>{w.handleLoading(n,i,!0)}),1050)}))},initialBtnTxt:"Yes"}),P=new class{constructor(e){let{nameElm:t,jobElm:n,picElm:i}=e;this._nameElm=document.querySelector(t),this._jobElm=document.querySelector(n),this._picElm=document.querySelector(i)}setUserInfo(e){let{name:t,about:n,_id:i}=e;this._nameElm.textContent=t,this._jobElm.textContent=n,this.userId=i}getUserInfo(){return{nameInfo:this._nameElm.textContent,aboutMeInfo:this._jobElm.textContent}}getUserId(){return this.userId}setPictureProfile(e){this._picElm.style.backgroundImage='url("'.concat(e,'")')}}({nameElm:".profile__name",jobElm:".profile__about-me",picElm:".profile__avatar-cover"}),T=new c(".popup-box_type_change-profile-pic",(function(e,t,n){let{img_link:i}=e;T.handleLoading(t),U.onUpdateProfilePic({avatar:i}).then((()=>{T.handleLoading(t,"Profile Picture modified successfully!"),P.setPictureProfile(i),o((()=>{T.close()}),1e3)})).catch((e=>{T.handleLoading(t,p),console.log("Error: ".concat(e))})).finally((()=>{o((()=>{T.handleLoading(t,n,!1)}),1e3)}))}),"Save"),U=new class{constructor(e){let{baseUrl:t,headers:n}=e;this.headers=n,this.baseUrl=t}_onHttpRequest(e,t,n){const i="".concat(this.baseUrl).concat(e);return fetch(i,{method:t,headers:this.headers,body:JSON.stringify(n)}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}getInitInfo(){return Promise.all([this._getInitialCards(),this._getUserInfo()])}_getUserInfo(){return this._onHttpRequest("users/me","GET")}_getInitialCards(){return this._onHttpRequest("cards","GET")}setUserInfo(e){let{name:t,about:n}=e;return this._onHttpRequest("users/me","PATCH",{name:t,about:n})}addNewCard(e){let{name:t,link:n}=e;return this._onHttpRequest("cards","POST",{name:t,link:n})}onRemoveItem(e){return this._onHttpRequest("cards/".concat(e),"DELETE")}addItemLike(e){return this._onHttpRequest("cards/likes/".concat(e),"PUT")}removeItemLike(e){return this._onHttpRequest("cards/likes/".concat(e),"DELETE")}onUpdateProfilePic(e){let{avatar:t}=e;return this._onHttpRequest("users/me/avatar","PATCH",{avatar:t})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12/",headers:{authorization:"035a3e80-0d3f-421b-b4fa-7f406e49ad5f","Content-Type":"application/json"}});S(!0),U.getInitInfo().then((t=>{let[n,i]=t;var s;S(!1,n,i),s={formSelector:".popup-box__form",inputSelector:".popup-box__input",submitButtonSelector:".popup-box__submit-button",inactiveButtonClass:"popup-box__submit-button_inactive",inputErrorClass:".popup-box__input_type_error",errorClass:".popup-box__input-error_active"},Array.from(document.querySelectorAll(s.formSelector)).forEach((t=>{const n=new e(s,t),i=t.name;_[i]=n,n.enableValidation()})),x.setEventListeners(),B.setEventListeners(),q.setEventListeners(),w.setEventListeners(),T.setEventListeners()})).catch((e=>console.log("Error: ".concat(e))))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,